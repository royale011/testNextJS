import { type NextRequest } from "next/server";
import Order, { createOrders, updateOrderStatus } from "@/app/lib/models/Order";

// This api is used to get order information by user_id or order_id
// GET /api/order?user_id=xxx&order_id=xxx
// At least user_id or order_id is required
// Return 400 if neither user_id nor order_id
// Return 200 if found related orders
export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const user_id = searchParams.get("user_id");
  const order_id = searchParams.get("order_id");
  if (!user_id && !order_id) {
    return new Response("Parameter user_id or order_id is required", {
      status: 400,
    });
  }

  let findOptions: any = {};
  if (user_id) {
    findOptions["user_id"] = user_id;
  }
  if (order_id) {
    findOptions["order_id"] = order_id;
  }
  const orders = await Order.find(findOptions);
  return new Response(JSON.stringify(orders), { status: 200 });
}

// This api is used to create new orders
// PUT /api/order
// The request body contains an array of order information
// The order_id is generated by uuidv4
// The user_id is required
// A map of book_id and quantity is required
// Return 400 if the request body is not an array, usually means error
// return 200 if the orders are created successfully
export async function PUT(request: NextRequest) {
  const body = await request.json();
  if (!Array.isArray(body)) {
    return new Response("Body must be an array", { status: 400 });
  }

  const orders = await createOrders(body);
  if (typeof orders === "string") {
    return new Response(orders, { status: 400 });
  }

  return new Response(JSON.stringify(orders), { status: 200 });
}

// This api is used to update order status
// POST /api/order
// The request body contains an array of order information
// The order_id is required
// The status is required
// Return 400 if the request body is not an array, usually means error
// return 200 if the orders are updated successfully
export async function POST(request: NextRequest) {
  const body = await request.json();
  if (!Array.isArray(body)) {
    return new Response("Body must be an array", { status: 400 });
  }

  const orders = await updateOrderStatus(body);
  if (typeof orders === "string") {
    return new Response(orders, { status: 400 });
  }

  return new Response(JSON.stringify(orders), { status: 200 });
}
