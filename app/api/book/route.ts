import { type NextRequest } from "next/server";
import Book, { upsertBookInfo } from "@/app/lib/models/Book";

// query the book information by book_id or bookname
// GET /api/book?book_id=xxx&bookname=xxx
// bookname will be matched by regex
// The result will be an array of books that match the query
// If both parameters are not provided, will return all books in stock.
// The books that are marked as deleted will not be returned.
export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const book_id = searchParams.get("book_id");
  const bookname = searchParams.get("bookname");
  let findOptions: any = { deleted: false };
  if (book_id) {
    findOptions["book_id"] = book_id;
  }
  if (bookname) {
    findOptions["bookname"] = { $regex: bookname, $options: "i" };
  }

  const books = await Book.find({ book_id });

  // not return error when return empty book list
  return new Response(JSON.stringify(books), { status: 200 });
}

// insert or update book information. It includes the add and update methods in the demo requirements.
// the request body contains an array of book information
// the book_id is generated by uuidv4
// the stock count and deleted status is not touched
// if the bookname is not found, a new book will be inserted
// if the bookname is found, the book info will be updated
// return the updated or inserted books
export async function POST(request: NextRequest) {
  const body = await request.json();
  if (!Array.isArray(body)) {
    return new Response("Body must be an array", { status: 400 });
  }

  const books = await upsertBookInfo(body);
  if (!books || books.length === 0) {
    return new Response("Failed to update books", { status: 500 });
  }

  return new Response(JSON.stringify(books), { status: 200 });
}
