import { type NextRequest } from "next/server";
import Book, { upsertBookStock } from "@/app/lib/models/Book";

// insert or update book stock count.
// the request body contains an array of book information
// the book_id is generated by uuidv4
// the stock count and book information is not touched
// if the bookname is not found, a new book will be inserted with non-negative stock count
// if the bookname is found, the stock count will be updated, and count the stock count value in the request body as delta value
// return the updated or inserted books with stock count
export async function POST(request: NextRequest) {
  const body = await request.json();
  if (!Array.isArray(body)) {
    return new Response("Body must be an array", { status: 400 });
  }

  const books = await upsertBookStock(body);
  if (!books || books.length === 0) {
    return new Response("Failed to update books deleted status", {
      status: 500,
    });
  }

  return new Response(JSON.stringify(books), { status: 200 });
}

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const book_id = searchParams.get("book_id");
  const bookname = searchParams.get("bookname");
  const stockgte = searchParams.get("stockgte");
  const stocklte = searchParams.get("stocklte");
  let findOptions: any = {};
  if (book_id) {
    findOptions["book_id"] = book_id;
  }
  if (bookname) {
    findOptions["bookname"] = { $regex: bookname, $options: "i" };
  }
  if (stockgte) {
    findOptions["stock"] = { $gte: parseInt(stockgte) };
  }
  if (stocklte) {
    if (!findOptions["stock"]) {
      findOptions["stock"] = {};
    }
    findOptions["stock"].$lte = parseInt(stocklte);
  }

  const books = await Book.find(findOptions, ["book_id", "bookname", "stock"]);

  // not throwing error when return empty book list
  return new Response(JSON.stringify(books), { status: 200 });
}
